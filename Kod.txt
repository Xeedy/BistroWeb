 public IActionResult Edit(int id)
 {
     // Get the existing product for the given id
     Product existingProduct = _productAppService.GetProductById(id);

     if (existingProduct == null)
     {
         Log.Warning($"Product with ID {id} not found.");
         return NotFound(); // or handle appropriately
     }

     // Assuming CarouselProductViewModel has a property named Breweries to populate the dropdown
     CarouselProductViewModel viewModel = new CarouselProductViewModel
     {
         Products = new List<Product> { existingProduct },
         Breweries = _breweryAppService.GetBreweries()?.ToList() ?? new List<Brewery>(),
         SelectedBreweryId = existingProduct.BreweryId.HasValue ? (int)existingProduct.BreweryId : 0 // Set the default selected value based on the existing product
     };

     // Log or debug here to ensure the data is correct
     Log.Information($"GET - Brewery count: {viewModel.Breweries.Count}, SelectedBreweryId: {viewModel.SelectedBreweryId}");

     ViewData["Breweries"] = new SelectList(viewModel.Breweries, "Id", "Name", viewModel.SelectedBreweryId);

     return View(viewModel);
 }

 [HttpPost]
 [ValidateAntiForgeryToken]
 public async Task<IActionResult> Edit(CarouselProductViewModel viewModel)
 {
     Log.Information($"Received POST request for Edit action. Products count: {viewModel.Products?.Count}, SelectedBreweryId: {viewModel.SelectedBreweryId}");

     // Retrieve the breweries from the repository
     IEnumerable<Brewery> breweries = _breweryAppService.GetBreweries();

     // Set the breweries property on the view model
     viewModel.Breweries = breweries.ToList();

     // Validate the model
     if (!ModelState.IsValid)
     {
         Log.Error("Model state is not valid. Returning to the view with validation errors.");

         foreach (var key in ModelState.Keys)
         {
             var errors = ModelState[key].Errors;
             foreach (var error in errors)
             {
                 Log.Error($"ModelState Error for {key}: {error.ErrorMessage}");
             }
         }

         // If the model is not valid, return to the view with validation errors
         viewModel.Breweries = breweries.ToList();
         return View(viewModel);
     }

     // Get the existing product for the given id
     Product existingProduct = _productAppService.GetProductById(viewModel.Products[0].Id);

     if (existingProduct == null)
     {
         Log.Warning($"Product with ID {viewModel.Products[0].Id} not found during POST request.");
         return NotFound(); // or handle appropriately
     }

     // Update other properties
     existingProduct.Name = viewModel.Products[0].Name;
     existingProduct.Description = viewModel.Products[0].Description;
     existingProduct.Price = viewModel.Products[0].Price;
     existingProduct.BreweryId = viewModel.Products[0].BreweryId;

     // If a new image is provided, upload and update the image source
     if (viewModel.Products[0].Image != null)
     {
         string newImageSrc = await _fileUploadService.FileUploadAsync(viewModel.Products[0].Image, Path.Combine("img", "products"));
         existingProduct.ImageSrc = newImageSrc;
     }

     try
     {
         // Save changes to the database
         await _productAppService.Edit(existingProduct);

         Log.Information($"Product with ID {existingProduct.Id} updated successfully.");
         // Redirect to the Index action
         return RedirectToAction(nameof(Index));
     }
     catch (Exception ex)
     {
         Log.Error($"Error updating product with ID {existingProduct.Id}. Exception: {ex.Message}");

         foreach (var modelStateEntry in ModelState)
         {
             var key = modelStateEntry.Key;
             var errors = modelStateEntry.Value.Errors;

             foreach (var error in errors)
             {
                 Log.Error($"ModelState Error for {key}: {error.ErrorMessage}");
             }
         }

         // Log the exception or handle it appropriately
         ModelState.AddModelError(string.Empty, "Error updating product.");
         viewModel.Breweries = breweries.ToList();
         return View(viewModel);
     }
 }
<div class="mb-3">
    <label class="form-label" asp-for="Products[0].Description">Popisek</label>
    <input class="form-control" asp-for="Products[0].Description">
    <span asp-validation-for="Products[0].Description" class="text-danger"></span>
</div>

<div class="mb-3">
    <label class="form-label" asp-for="Products[0].Price">Cena</label>
    <input class="form-control" asp-for="Products[0].Price">
    <span asp-validation-for="Products[0].Price" class="text-danger"></span>
</div>